/** \file renderers/flat.h
  * \brief Renders a simple map with flat, 2D map tiles
  * \extends renderer.h
  */
#ifndef RENDERER_FLAT_H
#define RENDERER_FLAT_H

#include <png.h>

#include "level.h"
#include "colors.h"
#include "chunk.h"

/** \brief The width of a flat %renderer image in pixels */
#define RENDERER_FLAT_IMAGE_WIDTH  256
/** \brief The height of a flat %renderer image in pixels */
#define RENDERER_FLAT_IMAGE_HEIGHT 256

/** \brief The number of slots to use for a cache */
#define RENDERER_FLAT_CACHE_SIZE 16

/** \brief What percent of skylight should apply to the total light */
#define RENDERER_FLAT_SKY_PERCENT 1.0
/** \brief What percent of blocklight should apply to the total light */
#define RENDERER_FLAT_BLOCK_PERCENT 1.0

/** \brief Creates a new Flat %Renderer.
  * \param lvl          The level to render
  * \param map          A color_map to use while rendering the map
  * \return A new renderer, or NULL on error.
  */
renderer *renderer_flat_new(level *lvl, color_map *map);

/** \brief Returns the dimensions of a tile generated by a flat %renderer.
  * \param[out] width   The width of the tile
  * \param[out] height  The height of the tile
  * \return 0 on success, -1 on error
  * 
  * Implements renderer_funcs.dimensions.
  */
int renderer_flat_dimensions(int *width, int *height);

/** \brief Draws a single row of image data
  * \param      _r          A void pointer to a renderer
  * \param[out] buffer      The buffer to draw upon
  * \param      row_number  Which row is to be rendered
  *
  * Implements renderer_funcs.draw_row.
  */
void renderer_flat_draw_row(void *_r, png_bytep buffer, int row_number);

/** \brief Retrieve a chunk at the given coordinates
  * \param r        The renderer whose level's chunks you want
  * \param coord_x  The X Coordinate of the chunk you want
  * \param coord_z  The Z Coordinate of the chunk you want
  * \return The chunk corresponding to the coordinates, or NULL if it is
  *         missing or there is an error.
  */
chunk *renderer_flat_get_chunk(renderer *r, int32_t coord_x, int32_t coord_z);

#endif
